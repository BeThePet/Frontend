"use client"

import { useState, useEffect } from "react"
import Link from "next/link"
import { ArrowLeft, AlertTriangle, Search, ChevronRight, Heart, Thermometer, Droplets, X } from "lucide-react"
import { motion } from "framer-motion"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion"
import { Badge } from "@/components/ui/badge"
import { getData } from "@/lib/storage"

// 긴급 상황 데이터
const emergencyGuides = [
  {
    id: "poisoning",
    title: "중독",
    icon: <AlertTriangle className="h-5 w-5" />,
    severity: "high",
    symptoms: ["구토", "설사", "과도한 침 흘림", "경련", "의식 저하"],
    firstAid: [
      "먹은 독성 물질을 확인하세요.",
      "구토를 유도하지 마세요 (수의사의 지시가 없는 한).",
      "활성탄을 가지고 있다면 수의사와 상담 후 투여하세요.",
      "즉시 동물병원으로 이동하세요.",
    ],
    notes: "중독 물질과 섭취 시간을 기록해두면 치료에 도움이 됩니다.",
  },
  {
    id: "seizure",
    title: "발작",
    icon: <AlertTriangle className="h-5 w-5" />,
    severity: "high",
    symptoms: ["몸의 경직", "의식 상실", "다리를 젓는 움직임", "침 흘림", "배변/배뇨 실수"],
    firstAid: [
      "반려견의 주변에서 위험한 물건을 치우세요.",
      "반려견을 만지거나 입에 손을 넣지 마세요.",
      "발작 시간을 기록하세요.",
      "발작이 1분 이상 지속되거나 연속으로 발생하면 즉시 병원으로 이동하세요.",
    ],
    notes: "발작 전후 행동을 기록해두면 진단에 도움이 됩니다.",
  },
  {
    id: "choking",
    title: "질식",
    icon: <AlertTriangle className="h-5 w-5" />,
    severity: "high",
    symptoms: ["호흡 곤란", "과도한 기침", "입술이나 잇몸이 파랗게 변함", "공황 상태"],
    firstAid: [
      "반려견의 입을 열고 이물질이 보이면 조심스럽게 제거하세요.",
      "하임리히 방법: 작은 개는 등을 위로 향하게 들고, 큰 개는 뒤에서 복부를 감싸고 위쪽으로 밀어올리세요.",
      "이물질이 제거되지 않으면 즉시 병원으로 이동하세요.",
    ],
    notes: "질식은 생명을 위협하는 응급 상황입니다. 신속하게 대처하세요.",
  },
  {
    id: "heatstroke",
    title: "열사병",
    icon: <Thermometer className="h-5 w-5" />,
    severity: "high",
    symptoms: ["과도한 헥헥거림", "짙은 붉은색 잇몸", "구토", "설사", "의식 저하", "비틀거림"],
    firstAid: [
      "시원한 장소로 이동시키세요.",
      "미지근한 물로 몸을 적셔주세요 (차가운 물은 피하세요).",
      "선풍기로 바람을 쐬어주세요.",
      "물을 조금씩 마시게 하세요.",
      "체온이 정상으로 돌아오더라도 반드시 병원에 방문하세요.",
    ],
    notes: "여름철 차 안에 반려견을 절대 두지 마세요. 온도는 빠르게 상승합니다.",
  },
  {
    id: "bleeding",
    title: "출혈",
    icon: <Heart className="h-5 w-5" />,
    severity: "medium",
    symptoms: ["지속적인 출혈", "혈액이 묻은 털", "창백한 잇몸", "약한 맥박", "무기력"],
    firstAid: [
      "깨끗한 천이나 거즈로 상처를 압박하세요.",
      "출혈이 심하면 지혈대를 사용하세요 (최대 15분).",
      "반려견을 따뜻하게 유지하고 움직임을 최소화하세요.",
      "즉시 병원으로 이동하세요.",
    ],
    notes: "출혈량이 많으면 쇼크 상태가 될 수 있으니 주의하세요.",
  },
  {
    id: "fracture",
    title: "골절",
    icon: <AlertTriangle className="h-5 w-5" />,
    severity: "medium",
    symptoms: ["다리를 절음", "부기", "비정상적인 각도", "만졌을 때 통증", "움직이지 않으려 함"],
    firstAid: [
      "반려견을 진정시키고 움직임을 최소화하세요.",
      "개방성 골절(뼈가 피부를 뚫고 나온 경우)은 깨끗한 천으로 덮으세요.",
      "부목을 대지 마세요 (잘못하면 더 악화될 수 있습니다).",
      "담요나 수건으로 조심스럽게 감싸서 병원으로 이동하세요.",
    ],
    notes: "골절이 의심되면 반려견을 들어올릴 때 부상 부위를 지지해주세요.",
  },
  {
    id: "dehydration",
    title: "탈수",
    icon: <Droplets className="h-5 w-5" />,
    severity: "medium",
    symptoms: ["피부 탄력성 저하", "잇몸 건조", "무기력", "식욕 감소", "소변량 감소"],
    firstAid: [
      "깨끗한 물을 조금씩 자주 마시게 하세요.",
      "전해질 용액을 제공하세요 (수의사와 상담 후).",
      "시원하고 그늘진 곳에서 휴식을 취하게 하세요.",
      "증상이 개선되지 않으면 병원에 방문하세요.",
    ],
    notes: "탈수는 다른 질병의 증상일 수 있으니 원인을 파악하는 것이 중요합니다.",
  },
  {
    id: "allergic",
    title: "알레르기 반응",
    icon: <AlertTriangle className="h-5 w-5" />,
    severity: "medium",
    symptoms: ["얼굴 부종", "두드러기", "가려움", "호흡 곤란", "구토", "설사"],
    firstAid: [
      "알레르기 원인을 제거하세요.",
      "수의사가 처방한 항히스타민제가 있다면 투여하세요.",
      "호흡 곤란이나 심한 부종이 있으면 즉시 병원으로 이동하세요.",
    ],
    notes: "이전에 알레르기 반응을 보인 적이 있다면, 수의사와 상담하여 응급 키트를 준비해두세요.",
  },
  {
    id: "vomiting",
    title: "구토와 설사",
    icon: <AlertTriangle className="h-5 w-5" />,
    severity: "low",
    symptoms: ["반복적인 구토", "설사", "식욕 감소", "무기력", "복부 통증"],
    firstAid: [
      "물과 음식을 12시간 동안 제한하세요 (물은 소량씩 제공).",
      "증상이 호전되면 삶은 닭고기와 흰쌀 같은 소화가 쉬운 음식을 소량 제공하세요.",
      "24시간 이상 지속되거나 혈액이 섞여 있으면 병원에 방문하세요.",
    ],
    notes: "구토물이나 대변의 상태(색상, 질감, 이물질 등)를 기록해두면 진단에 도움이 됩니다.",
  },
  {
    id: "eyeinjury",
    title: "눈 부상",
    icon: <AlertTriangle className="h-5 w-5" />,
    severity: "medium",
    symptoms: ["눈을 비비거나 긁음", "충혈", "부종", "눈물 과다", "눈을 감고 있음"],
    firstAid: [
      "반려견이 눈을 더 긁지 않도록 방지하세요.",
      "깨끗한 물로 눈을 부드럽게 씻어내세요.",
      "이물질이 보이면 제거하려 하지 말고 병원에 방문하세요.",
      "엘리자베스 칼라를 착용시키세요.",
    ],
    notes: "눈 부상은 시력에 영향을 줄 수 있으므로 신속하게 치료해야 합니다.",
  },
]

interface HospitalInfo {
  id: string
  name: string
  phone: string
  isEmergency: boolean
}

export default function EmergencyGuidePage() {
  const [searchTerm, setSearchTerm] = useState("")
  const [selectedGuide, setSelectedGuide] = useState<(typeof emergencyGuides)[0] | null>(null)
  const [emergencyHospitals, setEmergencyHospitals] = useState<HospitalInfo[]>([])
  const [isLoading, setIsLoading] = useState(true)

  // 병원 정보 불러오기
  useEffect(() => {
    const loadHospitals = () => {
      try {
        setIsLoading(true)
        const savedHospitals = getData("hospitalInfo")
        if (savedHospitals) {
          // 응급 병원만 필터링
          const emergency = savedHospitals.filter((hospital: any) => hospital.isEmergency)
          setEmergencyHospitals(emergency)
        }
      } catch (error) {
        console.error("병원 정보를 불러오는 중 오류가 발생했습니다:", error)
      } finally {
        setIsLoading(false)
      }
    }

    loadHospitals()
  }, [])

  // 검색어 필터링
  const filteredGuides = emergencyGuides.filter((guide) => {
    if (!searchTerm) return true
    return (
      guide.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      guide.symptoms.some((symptom) => symptom.toLowerCase().includes(searchTerm.toLowerCase()))
    )
  })

  return (
    <div className="min-h-screen bg-pink-50 pb-20">
      <div className="bg-pink-200 p-4 flex items-center justify-between">
        <div className="flex items-center">
          <Link href="/dashboard" className="text-gray-800">
            <ArrowLeft className="w-6 h-6" />
          </Link>
          <h1 className="text-xl font-bold text-gray-800 ml-4">긴급 상황 가이드</h1>
        </div>
        <Badge variant="destructive" className="bg-red-500 text-white">
          응급 처치
        </Badge>
      </div>

      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="p-5 space-y-6"
      >
        {/* 긴급 연락처 */}
        <Card className="bg-white rounded-xl shadow-sm border-2 border-red-100">
          <CardContent className="p-5">
            <div className="flex items-center gap-3 mb-4">
              <div className="w-12 h-12 bg-red-100 rounded-full flex items-center justify-center">
                <AlertTriangle className="w-6 h-6 text-red-500" />
              </div>
              <div>
                <h2 className="text-lg font-semibold text-gray-800">긴급 상황 안내 🚨</h2>
                <p className="text-sm text-gray-600">응급 상황 시 즉시 가까운 동물병원을 방문하세요.</p>
              </div>
            </div>

            <div className="space-y-3">
              <div className="flex justify-between items-center p-3 bg-red-50 rounded-lg">
                <div className="font-medium">응급 상황 발생 시</div>
                <Badge variant="outline" className="bg-red-100 text-red-700 border-red-200">
                  즉시 병원 방문
                </Badge>
              </div>
              <div className="flex justify-between items-center p-3 bg-pink-50 rounded-lg">
                <div className="font-medium">병원 방문 전 응급 처치</div>
                <Badge variant="outline" className="bg-pink-100 text-pink-700 border-pink-200">
                  아래 가이드 참고
                </Badge>
              </div>
              <div className="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                <div className="font-medium">병원 정보 미리 저장하기</div>
                <Link href="/emergency/hospital">
                  <Button variant="outline" size="sm" className="text-gray-700">
                    병원 정보 관리
                  </Button>
                </Link>
              </div>
            </div>

            {/* 등록된 응급 병원 정보 표시 */}
            {emergencyHospitals.length > 0 && (
              <div className="mt-4 border-t border-gray-100 pt-4">
                <h3 className="font-medium text-gray-800 mb-2">등록된 응급 병원</h3>
                <div className="space-y-2">
                  {emergencyHospitals.map((hospital) => (
                    <div key={hospital.id} className="flex justify-between items-center p-2 bg-red-50 rounded-lg">
                      <span className="font-medium text-sm">{hospital.name}</span>
                      <a href={`tel:${hospital.phone}`} className="text-sm text-blue-500">
                        {hospital.phone}
                      </a>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </CardContent>
        </Card>

        {/* 검색 필드 */}
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
          <Input
            placeholder="증상이나 상황을 검색하세요"
            className="pl-10 pr-10 rounded-full border-gray-300 h-12"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
          {searchTerm && (
            <Button
              variant="ghost"
              size="icon"
              className="absolute right-1 top-1/2 transform -translate-y-1/2 h-10 w-10 rounded-full"
              onClick={() => setSearchTerm("")}
            >
              <X className="w-5 h-5 text-gray-400" />
            </Button>
          )}
        </div>

        {/* 응급 상황 목록 */}
        {!selectedGuide ? (
          <div className="space-y-3">
            <h3 className="font-semibold text-gray-800">응급 상황 가이드 🚑</h3>
            {filteredGuides.map((guide) => (
              <motion.div
                key={guide.id}
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.3, delay: 0.1 }}
              >
                <Card
                  className={`cursor-pointer hover:shadow-md transition-shadow ${
                    guide.severity === "high"
                      ? "border-l-4 border-l-red-500"
                      : guide.severity === "medium"
                        ? "border-l-4 border-l-amber-500"
                        : "border-l-4 border-l-green-500"
                  }`}
                  onClick={() => setSelectedGuide(guide)}
                >
                  <CardContent className="p-4 flex justify-between items-center">
                    <div className="flex items-center gap-3">
                      <div
                        className={`w-10 h-10 rounded-full flex items-center justify-center ${
                          guide.severity === "high"
                            ? "bg-red-100 text-red-500"
                            : guide.severity === "medium"
                              ? "bg-amber-100 text-amber-500"
                              : "bg-green-100 text-green-500"
                        }`}
                      >
                        {guide.icon}
                      </div>
                      <div>
                        <h4 className="font-medium text-gray-800">{guide.title}</h4>
                        <p className="text-xs text-gray-500">
                          {guide.symptoms.slice(0, 3).join(", ")}
                          {guide.symptoms.length > 3 ? " 외" : ""}
                        </p>
                      </div>
                    </div>
                    <ChevronRight className="w-5 h-5 text-gray-400" />
                  </CardContent>
                </Card>
              </motion.div>
            ))}

            {filteredGuides.length === 0 && (
              <div className="text-center py-8">
                <p className="text-gray-500">검색 결과가 없습니다.</p>
              </div>
            )}
          </div>
        ) : (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.3 }}
            className="space-y-4"
          >
            <Button variant="ghost" className="flex items-center gap-2" onClick={() => setSelectedGuide(null)}>
              <ArrowLeft className="w-4 h-4" />
              <span>돌아가기</span>
            </Button>

            <Card
              className={`${
                selectedGuide.severity === "high"
                  ? "border-t-4 border-t-red-500"
                  : selectedGuide.severity === "medium"
                    ? "border-t-4 border-t-amber-500"
                    : "border-t-4 border-t-green-500"
              }`}
            >
              <CardContent className="p-5">
                <div className="flex items-center gap-3 mb-4">
                  <div
                    className={`w-12 h-12 rounded-full flex items-center justify-center ${
                      selectedGuide.severity === "high"
                        ? "bg-red-100 text-red-500"
                        : selectedGuide.severity === "medium"
                          ? "bg-amber-100 text-amber-500"
                          : "bg-green-100 text-green-500"
                    }`}
                  >
                    {selectedGuide.icon}
                  </div>
                  <div>
                    <h2 className="text-lg font-semibold text-gray-800">{selectedGuide.title}</h2>
                    <Badge
                      variant={
                        selectedGuide.severity === "high"
                          ? "destructive"
                          : selectedGuide.severity === "medium"
                            ? "outline"
                            : "secondary"
                      }
                    >
                      {selectedGuide.severity === "high"
                        ? "긴급"
                        : selectedGuide.severity === "medium"
                          ? "주의"
                          : "경미"}
                    </Badge>
                  </div>
                </div>

                <Accordion type="single" collapsible defaultValue="symptoms">
                  <AccordionItem value="symptoms">
                    <AccordionTrigger className="text-base font-medium">증상 🔍</AccordionTrigger>
                    <AccordionContent>
                      <ul className="list-disc pl-5 space-y-1">
                        {selectedGuide.symptoms.map((symptom, index) => (
                          <li key={index} className="text-gray-700">
                            {symptom}
                          </li>
                        ))}
                      </ul>
                    </AccordionContent>
                  </AccordionItem>
                  <AccordionItem value="firstAid">
                    <AccordionTrigger className="text-base font-medium">응급 처치 🩹</AccordionTrigger>
                    <AccordionContent>
                      <ol className="list-decimal pl-5 space-y-2">
                        {selectedGuide.firstAid.map((step, index) => (
                          <li key={index} className="text-gray-700">
                            {step}
                          </li>
                        ))}
                      </ol>
                    </AccordionContent>
                  </AccordionItem>
                  <AccordionItem value="notes">
                    <AccordionTrigger className="text-base font-medium">주의사항 ⚠️</AccordionTrigger>
                    <AccordionContent>
                      <p className="text-gray-700">{selectedGuide.notes}</p>
                    </AccordionContent>
                  </AccordionItem>
                </Accordion>

                <div className="mt-6">
                  <Link href="/emergency/hospital">
                    <Button className="w-full" variant="outline">
                      내 동물병원 정보 관리하기
                    </Button>
                  </Link>
                </div>
              </CardContent>
            </Card>
          </motion.div>
        )}
      </motion.div>
    </div>
  )
}